<?php

/***************************************************************
* Live Admin Standalone
* Copyright 2008-2011 Dayana Networks Ltd.
* All rights reserved, Live Admin  is  protected  by  Canada and
* International copyright laws. Unauthorized use or distribution
* of  Live Admin  is  strictly  prohibited,  violators  will  be
* prosecuted. To  obtain  a license for using Live Admin, please
* register at http://www.liveadmin.net/register.php
*
* For more information please refer to Live Admin official site:
*    http://www.liveadmin.net
*
* Translation service provided by Google Inc.
***************************************************************/






 if(!defined('LIVEADMIN')) exit; include_once('mysqldump_import.php'); include_once('cache.php'); class LV_LiveAdminUpdate { private $msg_queue; function LV_LiveAdminUpdate() { $this->msg_queue = array(); } function CheckFTPLogin($host,$port,$user,$pass,$folder) { if(!defined('LIVEADMIN_TEMP_FC')) { return('There is no writable temporary folder on this server. I checked these locations:<br>'.LIVEADMIN_TEMP_FC_DEFAULT.'<br>'.ini_get('session.save_path').'<br>'.ini_get('upload_tmp_dir').'<br>/tmp'); } $conn_id = ftp_connect($host,$port,60); $folder_em = '<em>'.$folder.'</em>'; if($conn_id===false) return('Unable to connect to FTP server'); if (!ftp_login($conn_id, $user, $pass)) { ftp_close($conn_id); return('Unable to login to to FTP server'); } if(!ftp_chdir($conn_id, $folder)) { ftp_close($conn_id); return('Unable to change directory to '.$folder_em); } if(!ftp_chdir($conn_id, 'assets')) { ftp_close($conn_id); return('There is no LiveAdmin installation at '.$folder_em); } if(ftp_size($conn_id,'_base_upgrade.js')<100) { ftp_close($conn_id); return('There is no LiveAdmin installation at '.$folder_em); } ftp_cdup($conn_id); if(!ftp_chdir($conn_id, 'include')) { ftp_close($conn_id); return('There is no LiveAdmin installation at '.$folder_em); } if(ftp_size($conn_id,'chat_panel_p1.php')<100) { ftp_close($conn_id); return('There is no LiveAdmin installation at '.$folder_em); } $temp = LIVEADMIN_TEMP_FC.'/lv_up_'.RandomString(32); if(!ftp_get($conn_id,$temp,'config.php',FTP_BINARY)) { @unlink($temp); ftp_close($conn_id); return('There is no LiveAdmin installation at '.$folder_em); } else { $tm = file_get_contents($temp); @unlink($temp); $tm = explode("\n",$tm); $lvb = ''; foreach($tm as $line) { $line = trim($line); if(preg_match('/^\s*define\(\s*\'LIVEADMIN_UNIQ\'\s*,\s*\'(.*)\'\s*\)\s*;$/ismU',$line,$m)) { $lvb = $m[1]; break; } } if($lvb=='') { ftp_close($conn_id); return('There is no LiveAdmin installation at '.$folder_em); } if($lvb!=LIVEADMIN_UNIQ) { ftp_close($conn_id); return('I found a LiveAdmin installation at '.$folder_em.', but it\'s not the one you are running right now.'); } } ftp_close($conn_id); return(''); } function ClearMessages() { $dbh=mysql_connect(LIVEADMIN_DB_HOST, LIVEADMIN_DB_USER,LIVEADMIN_DB_PASS,true) or die ('0'); mysql_select_db(LIVEADMIN_DB_DATABASE,$dbh); $tbl = LIVEADMIN_DB_PREFIX.'cache'; mysql_query("DELETE FROM $tbl WHERE cache_id LIKE 'LV_UPDATE_STL_%' ",$dbh); mysql_close($dbh); } function SetMessage($state,$msg) { $this->msg_queue[] = array($state,$msg); $dbh=mysql_connect(LIVEADMIN_DB_HOST, LIVEADMIN_DB_USER,LIVEADMIN_DB_PASS,true) or die ('0'); mysql_select_db(LIVEADMIN_DB_DATABASE,$dbh); $tbl = LIVEADMIN_DB_PREFIX.'cache'; $dtm = time(); $cache_id_esc = mysql_real_escape_string('LV_UPDATE_STL_'.$state,$dbh); $data_enc = encode64($msg); mysql_query("INSERT INTO $tbl SET cache_text='$data_enc', update_date=$dtm, cache_id='$cache_id_esc' ",$dbh); mysql_close($dbh); } function GetMessages() { $RV = array(); $dbh=mysql_connect(LIVEADMIN_DB_HOST, LIVEADMIN_DB_USER,LIVEADMIN_DB_PASS,true) or die ('0'); mysql_select_db(LIVEADMIN_DB_DATABASE,$dbh); $tbl = LIVEADMIN_DB_PREFIX.'cache'; $dtm = time(); $cache_id_esc = mysql_real_escape_string('LV_UPDATE_STL_'.$state,$dbh); $data_enc = encode64($msg); $res = mysql_query("SELECT * FROM $tbl WHERE cache_id LIKE 'LV_UPDATE_STL_%' ",$dbh); $to_delete = array(); if($res) { while($req = mysql_fetch_array($res)) { $RV[] = array ( 'msg' => decode64($req['cache_text']), 'date' => $req['update_date'], 'state' => str_replace('LV_UPDATE_STL_','',$req['cache_id']) ); $to_delete[] = 'cache_id="'.$req['cache_id'].'"'; } } if(count($to_delete)>0) { $del_sql = implode(" OR ",$to_delete); mysql_query("DELETE FROM $tbl WHERE $del_sql ",$dbh); } mysql_close($dbh); uasort($RV,array($this,'_sort_messages')); return($RV); } function _sort_messages($ar1,$ar2) { if($ar1['state']<$ar2['state']) return(-1); if($ar1['state']>$ar2['state']) return(1); return(0); } function OpenFTP($host,$port,$user,$pass,$folder) { $conn_id = ftp_connect($host,$port,60); if($conn_id===false) return('Unable to connect to FTP server'); if (!ftp_login($conn_id, $user, $pass)) { ftp_close($conn_id); return('Unable to login to to FTP server'); } if(!ftp_chdir($conn_id, $folder)) { ftp_close($conn_id); return('Unable to change directory to '.$folder); } return($conn_id); } function CloseFTP($conn_id) { ftp_close($conn_id); } function Start($host,$port,$user,$pass,$folder) { $this->ClearMessages(); $this->SetMessage(1000,'<br>Current installed version: '.LIVEADMIN_VERSION); $this->SetMessage(1010,'<br>Downloading file list from upgrade server ...'); $RemoteFiles = $this->GetRemoteFileList(); if($RemoteFiles===false) { return false; } $this->SetMessage(1999,'  Done'); $LocalFiles = $this->GetLocalFileList(); $local_conn_id = $this->OpenFTP($host,$port,$user,$pass,$folder); if(is_string($local_conn_id)) { $this->SetMessage(99999,'<br><strong>ERROR: '.$local_conn_id.'</strong><br>'); return false; } $this->SetMessage(2000,'<br>Updating directory structure ...'); $res = $this->SyncFolders($local_conn_id,$LocalFiles,$RemoteFiles); if($res!==true) { $this->SetMessage(99999,'<br><strong>ERROR: '.$res.'</strong><br>'); $this->CloseFTP($local_conn_id); return false; } $this->SetMessage(2999,'<br>Directory structure updated.'); $this->SetMessage(3000,'<br>Updating scripts and files ...'); $res = $this->SyncFiles($local_conn_id,$LocalFiles,$RemoteFiles); if($res!==true) { $this->SetMessage(99999,''); $this->CloseFTP($local_conn_id); return false; } $this->SetMessage(3999,'<br>All files updated.'); $this->CloseFTP($local_conn_id); $this->SetMessage(4000,'<br>Updating databases ...'); $this->SyncDatabases(); $this->SetMessage(4999,'<br>All databases updated.'); $this->SetMessage(99998,'<br><br><strong>All done. Please logout and login again.</strong>'); } function GetResults() { return($this->GetMessages()); } function GetRemoteFileList() { $Post = "site_key=".$_SERVER['sinfo']['key'].'&trial='.$_SERVER['sinfo']['in_trial'].'&lic'.'ense='.$_SERVER['sinfo']['license']; if(LIVEADMIN_LITE) $Post .= '&subv=lite'; $header[] = "Accept: text/vnd.wap.wml,*.*"; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, 'http://www.liveadmin.net/_remote_list_stnl.php?rnd='.rand(10000,99999)); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_RETURNTRANSFER,1); @curl_setopt($ch,CURLOPT_FOLLOWLOCATION,1); curl_setopt($ch, CURLOPT_VERBOSE,0); curl_setopt($ch, CURLOPT_USERAGENT,'LiveAdmin'); curl_setopt($ch, CURLOPT_POST,1); curl_setopt($ch, CURLOPT_POSTFIELDS,$Post); curl_setopt($ch, CURLOPT_HTTPHEADER,$header); $data = curl_exec ($ch); $info = curl_getinfo($ch); curl_close($ch); if(preg_match('/----------LIVEADMIN-UPDATE-START----------(.*)----------LIVEADMIN-UPDATE-END----------/ismU',$data,$m)) { $dt = unserialize(decode64(str_replace(array("\r","\n","\s"),"",$m[1]))); if(!is_array($dt)) { $this->SetMessage(99999,'<br><strong>ERROR: Unable to get the file list from update server, please try again later.</strong><br>'); return false; } if(isset($dt['invalid_license']) && $dt['invalid_license']==1) { $this->SetMessage(99999,'<br><strong>ERROR: Can not update with an invalid registration code.</strong><br>'); return false; } return($dt); } else { $this->SetMessage(99999,'<br><strong>ERROR: Unable to get the file list from update server, please try again later.</strong><br>'); return false; } } function GetLocalFileList() { $dir = LIVEADMIN_F; $RV = array(); $this->_GetLocalFileList($dir,$RV); $exclude = array ( str_replace('/','\/',$dir).'\/include\/config\.php', str_replace('/','\/',$dir).'\/geoip\/geolitecity\.dat' ); $RV2 = array('dir'=>array(),'file'=>array()); $FLD = array(); foreach($RV as $file) { $exc = false; foreach($exclude as $ex) { if(preg_match('/'.$ex.'/',$file)) { $exc = true; break; } } if($exc) continue; if(is_file($file)) $RV2['file'][] = array(md5_file($file),str_replace($dir.'/','',$file),filesize($file)); else $FLD[] = $file; $FLD[] = dirname($file); } $FLD = array_unique($FLD); foreach($FLD as $a=>$v) { if($v==$dir) continue; $RV2['dir'][] = str_replace(array($dir.'/'),'',$v); } return($RV2); } private function _GetLocalFileList($dir,&$RV) { if (is_dir($dir)) { if ($dh = opendir($dir)) { while (($file = readdir($dh)) !== false) { if($file=='.' || $file == '..') continue; if(is_file($dir.'/'.$file)) $RV[] = $dir.'/'.$file; elseif(is_dir($dir.'/'.$file)) { $RV[] = $dir.'/'.$file; $this->_GetLocalFileList($dir.'/'.$file,$RV); } } closedir($dh); } } } function SyncFolders($conn_id,$LocalFiles,$RemoteFiles) { $msg_index = 2010; foreach($LocalFiles['dir'] as $dir) { if(array_search($dir,$RemoteFiles['dir'])===false) { $this->SetMessage($msg_index++,'<br>Creating folder '.$dir); $folders = explode('/',$dir); $ch_count = 0; foreach($folders as $folder) { if(!@ftp_chdir($conn_id,$folder)) { ftp_mkdir($conn_id,$folder); } else { $ch_count++; } } for($i=0;$i<$ch_count;$i++) { ftp_cdup($conn_id); } } } return(true); } function SyncFiles($conn_id,$LocalFiles,$RemoteFiles) { $msg_index = 3010; $download_list = array(); $download_post_ar = array(); foreach($RemoteFiles['file'] as $rfileinfo) { $rmd5 = $rfileinfo[0]; $rfile = $rfileinfo[1]; $rsize = $rfileinfo[2]; $lmd5 = false; foreach($LocalFiles['file'] as $lfileinfo) { if($lfileinfo[1]==$rfile) { $lmd5 = $lfileinfo[0]; } } if($lmd5===false || $lmd5!=$rmd5 || true ) { $download_list[] = $rfileinfo; $download_post_ar[$rfile] = array($rmd5,$rsize); } } $download_post = serialize($download_post_ar); $prep_ready = false; $package_md5 = ''; $package_size = 0; $data_md5 = ''; $this->SetMessage($msg_index++,'<br>Preparing the package ...'); for($i=0;$i<10;$i++) { $ret = $this->GetPrepFileInfo($download_post,$package_md5,$package_size,$data_md5); if($ret==1) { $prep_ready = true; break; } elseif($ret==2) { $this->SetMessage($msg_index++,'<br>error(retry '.$i.'/10)'); } else { $this->SetMessage($msg_index++,'<br>Error B5845: Can not prepare the package for download, Please try to update the software later.'); return(false); } } if(!$prep_ready) { $this->SetMessage($msg_index++,'<br>Error B5846: Can not prepare the package for download, Please try to update the software later.'); return(false); } $this->SetMessage($msg_index++,'<br>Downloading updates ...'); $rnd = RandomString(32); $temp_file = LIVEADMIN_TEMP_FC.'/lv_up_'.$rnd; $this->SetMessage($msg_index++,'<br>Package Size: '.number_format($package_size/1024,2,'.',',').'KB'); $file_complete = false; $break_larger_than = 100*1024; if($package_size>$break_larger_than) { for($retry=0;$retry<10;$retry++) { $done_percent = -1; for($start = 0;$start<$package_size;$start+=$break_larger_than) { $parts_error = false; for($i=0;$i<10;$i++) { $data = ''; $ret = $this->GetRemoteFile($data,$package_md5,$start,$break_larger_than); if($ret==1) { $fi = fopen($temp_file,"a+"); fwrite($fi,$data); fclose($fi); $percent = intval((100*$start)/$package_size); if( $percent-$done_percent>10 ) { $this->SetMessage($msg_index++,'<br>'.$percent.'%'); $percent = $done_percent; } $parts_error = false; break; } elseif($ret==2) { $this->SetMessage($msg_index++,'<br>error(retry '.$i.'/10)'); $parts_error = true; sleep(1); } elseif($ret==3) { $this->SetMessage($msg_index++,'<br>Fatal Error'); $parts_error = true; break; } } if($parts_error) break; } if(!$parts_error && md5_file($temp_file)==$data_md5) { $this->SetMessage($msg_index++,'<br>100%'); $file_complete = true; break; } else { $this->SetMessage($msg_index++,'<br>Error downloading package, retry '.$retry.'/10'); } if($parts_error) break; } } else { for($i=0;$i<10;$i++) { $data = ''; $ret = $this->GetRemoteFile($data,$package_md5); if($ret==1) { file_put_contents($temp_file,$data); if(md5_file($temp_file)==$data_md5) { $file_complete = true; break; } else { $this->SetMessage($msg_index++,'<br>error(retry '.$i.'/10)'); sleep(1); } } elseif($ret==2) { $this->SetMessage($msg_index++,'<br>error(retry '.$i.'/10)'); sleep(1); } elseif($ret==3) { $this->SetMessage($msg_index++,'<br>Fatal Error'); break; } } } if(!$file_complete) { $this->SetMessage($msg_index++,'<br>Error B5847: Can not download the update package, Please try to update the software later.'); @unlink($temp_file); return(false); } else { $this->SetMessage($msg_index++,'<br>Download complete'); $fi = fopen($temp_file,"rb"); if(!$fi) { $this->SetMessage($msg_index++,'<br>Error B5848: Unable to open downloaded package'); @unlink($temp_file); return(false); } $buf = ''; while(!feof($fi)) { $buf .= fread($fi,10240); if(strpos($buf,"\n\n")!==false) break; } $endpos = strpos($buf,"\n\n"); if($endpos===false) { $this->SetMessage($msg_index++,'<br>Error B5849: Unable to read from downloaded package'); fclose($fi); @unlink($temp_file); return(false); } $endpos+=2; $header = substr($buf,0,$endpos); if(preg_match('/----------LIVEADMIN-PACKAGE-START----------(.*)----------LIVEADMIN-PACKAGE-END----------/ismU',$header,$m)) { $map = unserialize(base64_decode($m[1])); } else { $this->SetMessage($msg_index++,'<br>Error B5850: Unable to read from downloaded package'); fclose($fi); @unlink($temp_file); return(false); } $map_temp = LIVEADMIN_TEMP_FC.'/lv_upe_'.RandomString(32); foreach($map as $map_file=>$map_info) { $this->SetMessage($msg_index++,'<br>Installing '.$map_file.' ... '); $map_loc = $map_info[0]; $map_len = $map_info[1]; fseek($fi,$map_loc+$endpos,SEEK_SET); $buf = fread($fi,$map_len); if(is_callable("gzcompress") && is_callable("gzuncompress")) $buf = gzuncompress($buf); file_put_contents($map_temp,$buf); $upload = ftp_put($conn_id, $map_file, $map_temp, FTP_BINARY); if(!$upload) { $this->SetMessage($msg_index++,'<br>Error updating '.$map_file); } else { $this->SetMessage($msg_index++,' done'); } } @unlink($map_temp); fclose($fi); @unlink($temp_file); return(true); } } function GetPrepFileInfo($download_post,&$package_md5,&$package_size,&$data_md5) { if(is_callable("gzcompress") && is_callable("gzuncompress")) { $compress = 1; $download_post_enc = encode64(gzcompress($download_post,9)); } else { $compress = 0; $download_post_enc = encode64($download_post); } $Post = "mode=prep&file_list=$download_post_enc&compress=$compress"; if(LIVEADMIN_LITE) $Post .= '&subv=lite'; $header[] = "Accept: text/vnd.wap.wml,*.*"; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, 'http://www.liveadmin.net/_remote_file_stnl.php?rnd='.rand(10000,99999)); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_RETURNTRANSFER,1); @curl_setopt($ch,CURLOPT_FOLLOWLOCATION,1); curl_setopt($ch, CURLOPT_VERBOSE,0); curl_setopt($ch, CURLOPT_USERAGENT,'LiveAdmin Update Agent'); curl_setopt($ch, CURLOPT_POST,1); curl_setopt($ch, CURLOPT_POSTFIELDS,$Post); curl_setopt($ch, CURLOPT_HTTPHEADER,$header); $data = curl_exec ($ch); $info = curl_getinfo($ch); curl_close($ch); if(preg_match('/----------LIVEADMIN-UPDATE-START----------(.*)----------LIVEADMIN-UPDATE-END----------/ismU',$data,$m)) { $parts = explode("::",$m[1],5); if(count($parts)<5 || $parts[0]==0) return(3); $package_md5 = $parts[1]; $data_md5 = $parts[2]; $package_size = $parts[3]; return(1); } else { return(2); } } function GetRemoteFile(&$return_data,$package_md5,$start=0,$length=-1) { if(is_callable("gzcompress") && is_callable("gzuncompress")) $compress = 1; else $compress = 0; $Post = "mode=package&package_md5=$package_md5&start=$start&length=$length&compress=$compress"; if(LIVEADMIN_LITE) $Post .= '&subv=lite'; $header[] = "Accept: text/vnd.wap.wml,*.*"; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, 'http://www.liveadmin.net/_remote_file_stnl.php?rnd='.rand(10000,99999)); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_RETURNTRANSFER,1); @curl_setopt($ch,CURLOPT_FOLLOWLOCATION,1); curl_setopt($ch, CURLOPT_VERBOSE,0); curl_setopt($ch, CURLOPT_USERAGENT,'LiveAdmin Update Agent'); curl_setopt($ch, CURLOPT_POST,1); curl_setopt($ch, CURLOPT_POSTFIELDS,$Post); curl_setopt($ch, CURLOPT_HTTPHEADER,$header); $data = curl_exec ($ch); $info = curl_getinfo($ch); curl_close($ch); $endpos = strpos($data,"\n\n"); if($endpos===false) return(2); $header = substr($data,0,$endpos+2); if(preg_match('/----------LIVEADMIN-HEADER-START----------(.*)----------LIVEADMIN-HEADER-END----------/ismU',$header,$m)) { $parts = explode(":",$m[1],3); if(count($parts)<3 || $parts[0]==0) return(3); $buf = substr($data,$endpos+2); if(md5($buf)!=$parts[1]) return(2); $return_data = $buf; return(1); } else { return(2); } } function SyncDatabases() { $msg_index = 4010; $db_dir = LIVEADMIN_FQ; $FList = array(); if (is_dir($db_dir)) { if ($dh = opendir($db_dir)) { while (($file = readdir($dh)) !== false) { if($file=='.' || $file == '..') continue; if(is_file($db_dir.'/'.$file)) $FList[] = $db_dir.'/'.$file; } closedir($dh); } } $mysql = new MySQLDumpImport(); sort($FList); foreach($FList as $file) { $fname = basename($file); if(substr($fname,-4)!='.sql' || substr($fname,0,12)!='db_dump_000_') continue; $this->SetMessage($msg_index++,'<br>Processing '.substr($fname,12,-4).' ... '); $dump = ""; $tmpl = new GetTemplate($file,array('table_prefix'=>LIVEADMIN_DB_PREFIX)); $dump .= $tmpl->GetPart('table')."\n"; $dump .= $tmpl->GetPart('data')."\n"; $mysql->importDumpString($dump); $this->SetMessage($msg_index++,'done'); } unset($mysql); } function ReportErrors() { $q = array(); foreach($this->msg_queue as $a=>$v) { $q[$v[0]] = $v[1]; } if(is_callable("gzcompress") && is_callable("gzuncompress")) { $compress = 1; $report = encode64(gzcompress(serialize($q),9)); $phpinfo = encode64(gzcompress(serialize($this->parsePHPConfig()),9)); } else { $compress = 0; $report = encode64(serialize($q)); $phpinfo = encode64(serialize($this->parsePHPConfig())); } $Post = "report=$report&phpinfo=$phpinfo&compress=$compress"; if(LIVEADMIN_LITE) $Post .= '&subv=lite'; $header[] = "Accept: text/vnd.wap.wml,*.*"; $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, 'http://www.liveadmin.net/bug_report.php?rnd='.rand(10000,99999)); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_RETURNTRANSFER,1); @curl_setopt($ch,CURLOPT_FOLLOWLOCATION,1); curl_setopt($ch, CURLOPT_VERBOSE,0); curl_setopt($ch, CURLOPT_USERAGENT,'LiveAdmin Update Agent'); curl_setopt($ch, CURLOPT_POST,1); curl_setopt($ch, CURLOPT_POSTFIELDS,$Post); curl_setopt($ch, CURLOPT_HTTPHEADER,$header); $data = curl_exec ($ch); $info = curl_getinfo($ch); curl_close($ch); } function parsePHPConfig() { ob_start(); phpinfo(-1); $s = ob_get_contents(); ob_end_clean(); $a = $mtc = array(); if (preg_match_all('/<tr><td class="e">(.*?)<\/td><td class="v">(.*?)<\/td>(:?<td class="v">(.*?)<\/td>)?<\/tr>/',$s,$mtc,PREG_SET_ORDER)) { foreach($mtc as $v) { if($v[2] == '<i>no value</i>') continue; $a[$v[1]] = $v[2]; } } return $a; } } ?>